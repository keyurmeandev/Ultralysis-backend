<?php
namespace classes;
use db;
use filters;
use config;
use datahelper;
use utils;

class SelectionData extends config\UlConfig{

	public $filterType;
	public $DisplayOptions;
	
    public function go($settingVars){
		$this->initiate($settingVars);//INITIATE COMMON VARIABLES

		if($_REQUEST['filterType'] == 'product')
		{
			$this->filterType = "product";
			$this->DisplayOptions = $this->settingVars->productOptions_DisplayOptions;
		}
		else if($_REQUEST['filterType'] == 'market')
		{
			$this->filterType = "market";
			$this->DisplayOptions = $this->settingVars->marketOptions_DisplayOptions;
		}		
		
		$action	= $_REQUEST["action"];
		switch($action) 
		{
			case "initFirstTab":
				$this->initFirstTab();
				break; 
			case "getKeyData": 
				$this->getKeyData();
				break;
			case "getTabDatalist": 
				$this->getTabDatalist();
				break;
		}
		return $this->jsonOutput;
    }
	
	function initFirstTab()
	{	
		if (is_array($this->DisplayOptions) && !empty($this->DisplayOptions))
		{
			$this->fetch_all_product_and_marketSelection_data($this->DisplayOptions[0]['data']);
			foreach ($this->DisplayOptions as $key => $selectionTab) {
				$xmlTagAccountName  = $this->settingVars->dataArray[$selectionTab['data']]['NAME'];
				$xmlTag             = preg_match('/(,|\)|\()/',$xmlTagAccountName)==1 ? $this->settingVars->dataArray[$selectionTab['data']]['NAME_ALIASE'] : strtoupper($xmlTagAccountName);
				
				if (isset($this->settingVars->dataArray[$selectionTab['data']]['use_alias_as_tag']))
					$xmlTag = ($this->settingVars->dataArray[$selectionTab['data']]['use_alias_as_tag']) ? strtoupper($this->settingVars->dataArray[$selectionTab['data']]['NAME_ALIASE']) : $xmlTag;

				if (is_array($this->jsonOutput[$xmlTag]) && !empty($this->jsonOutput[$xmlTag])) {
					if(isset($_REQUEST['commonFilterPage']) && $_REQUEST['commonFilterPage'] == true)
					{
						$this->DisplayOptions[$key]['dataList'] = $this->jsonOutput['commonFilter'][$xmlTag]['dataList'];
						$this->DisplayOptions[$key]['selectedDataList'] = (isset($this->jsonOutput['commonFilter'][$xmlTag]['selectedDataList'])) ? $this->jsonOutput['commonFilter'][$xmlTag]['selectedDataList'] : array();
					}
					else
						$this->DisplayOptions[$key]['dataList'] = $this->jsonOutput[$xmlTag];
				}
				$this->DisplayOptions[$key]['isDataLoaded'] = ($key == 0) ? true : false;
			}
		}
		$this->jsonOutput[$this->filterType.'SelectionTabs'] = $this->DisplayOptions;
	}

	public function getTabDatalist()
	{
		$account = $_REQUEST['account'];
		$filterParams =[];
		$filterParamsQuery =[];

		/* CODE STARTS FOR GLOBAL FILTER PRODUCT SELECTION
		*  Done by : Shreyansh Sheth on 12/10/2018 18:13
		*/
		// $filterParamsArray = (isset($_REQUEST['filterParams']) && !empty($_REQUEST['filterParams'])) ? json_decode(stripslashes($_REQUEST['filterParams'])) : array();
		// if(isset($filterParamsArray) && !empty($filterParamsArray)){
		// 	$filterParams = json_decode( json_encode($filterParamsArray), true);
		// 	//FOR CATEGORY FILTER
		// 	foreach ($filterParams as $key => $value){
		// 		if(!empty($value['filterParams']) && $value['key']=="PRODUCT.AGG2"){ // CASE WHEN SKU TAB IS SELECTED AND VALUES OF PRODUCT CATEGORY IS SELECTED
		// 			$filterValues=explode(",",urldecode($value['filterParams']));
		// 			$whereQuery=" and ";
		// 			foreach ($filterValues as $k => $v){
		// 					$whereQuery .= $value['key']." = '". $v."' or ";
		// 			}
		// 			 $whereQuery = substr($whereQuery, 0, strrpos($whereQuery, ' or '));
		// 			 $filterParamsQuery[$value['key']]= $whereQuery;
		// 	// echo "<pre>";print_r($filterParamsQuery);die;		
		// 		}
		// 	}
		// 	if(!empty($filterParamsQuery)){
		// 		$configureProject = new config\ConfigureProject($this->settingVars, $this->queryVars);
	 //            //$configureProject->fetch_all_product_and_marketSelection_data(false,$filterParamsQuery);
		// 		// echo "<pre>";print_r($this->settingVars->dataArray);
		// 		// die;
		// 	}
		// }
		/* CODE ENDS FOR GLOBAL FILTER PRODUCT SELECTION */

		$selectedData = (isset($_REQUEST['selectedData']) && !empty($_REQUEST['selectedData'])) ? explode(",",urldecode($_REQUEST['selectedData'])) : array();

		$offset = (isset($_REQUEST['page']) && !empty($_REQUEST['page'])) ? ($_REQUEST['page']-1)*$this->settingVars->productAndMarketFilterTabDataLoadLimit : 0;

		$filterValue = (isset($_REQUEST['filterValue']) && !empty($_REQUEST['filterValue'])) ? $_REQUEST['filterValue'] : '';

		$selectedKeyData = array();
		if(isset($_REQUEST['account']) && !empty($_REQUEST['account']) && 
		   isset($this->settingVars->dataArray[$_REQUEST['account']]) && !empty($this->settingVars->dataArray[$_REQUEST['account']]))
		{
			$redisCache = new utils\RedisCache($this->queryVars);
            $requestHash = 'productAndMarketFilterTabData';
            $filterData = $redisCache->checkAndReadByStaticHashFromCache($requestHash);

            if ($filterData === false) {
                $configureProject = new config\ConfigureProject($this->settingVars, $this->queryVars);
                $configureProject->fetch_all_product_and_marketSelection_data();
                $filterData = $redisCache->checkAndReadByStaticHashFromCache($requestHash);
            }

			$xmlTagAccountName  = $this->settingVars->dataArray[$account]['NAME'];
			$xmlTag             = preg_match('/(,|\)|\()/',$xmlTagAccountName)==1 ? $this->settingVars->dataArray[$account]['NAME_ALIASE'] : strtoupper($xmlTagAccountName);
                
                $xmlTag = ($this->settingVars->dataArray[$account]['use_alias_as_tag']) ? strtoupper($this->settingVars->dataArray[$account]['NAME_ALIASE']) : $xmlTag;
            
                if(isset($this->settingVars->dataArray[$account]['ID_ALIASE']) && !empty($this->settingVars->dataArray[$account]['ID_ALIASE']))
                    $xmlTag .= "_". $this->settingVars->dataArray[$account]['ID_ALIASE'];

			if (is_array($filterData[$xmlTag]) && !empty($filterData[$xmlTag])) {
				if(isset($_REQUEST['commonFilterPage']) && $_REQUEST['commonFilterPage'] == true)
				{
					$selectedKeyData[$key]['dataList'] = $filterData['commonFilter'][$xmlTag]['dataList'];
					$selectedKeyData[$key]['selectedDataList'] = (isset($filterData['commonFilter'][$xmlTag]['selectedDataList'])) ? $filterData['commonFilter'][$xmlTag]['selectedDataList'] : array();
				} else {
					$filteredArray = $filterData[$xmlTag];
					/*if (!empty($filterValue)) {
						$filteredArray = array_filter($filterData[$xmlTag],function($v) use (&$filterValue) {
						    return strpos($v['label'], $filterValue) !== false;
						});
						$totalRecordCnt = (is_array($filteredArray) && !empty($filteredArray)) ? count($filteredArray) : 0;
						$totalPage = ($totalRecordCnt > 0 && $this->settingVars->productAndMarketFilterTabDataLoadLimit > 0) ? ceil($totalRecordCnt/$this->settingVars->productAndMarketFilterTabDataLoadLimit) : 1;
                    	$showPaging = ($totalPage > 1) ? true : false;
					} else {
						$totalRecordCnt = (is_array($filteredArray) && !empty($filteredArray)) ? count($filteredArray) : 0;
						$totalPage = ($totalRecordCnt > 0 && $this->settingVars->productAndMarketFilterTabDataLoadLimit > 0) ? ceil($totalRecordCnt/$this->settingVars->productAndMarketFilterTabDataLoadLimit) : 1;
                    	$showPaging = ($totalPage > 1) ? true : false;
					}*/

					// $dataSlice = array_slice($filteredArray, $offset, $this->settingVars->productAndMarketFilterTabDataLoadLimit);
					$dataSlice = $filteredArray;
					if (is_array($selectedData) && !empty($selectedData)) {
						// $datalistKey['dataList'] = $datalistKey['selectedDataList'] = [];
						$datalistKey['dataList'] = [];
						foreach ($dataSlice as $filterDataArray) {
							/*if (in_array($filterDataArray['data'], $selectedData)){
								$datalistKey['selectedDataList'][] = $filterDataArray;
							} else {
								$datalistKey['dataList'][] = $filterDataArray;
							}*/
							if (!in_array($filterDataArray['data'], $selectedData)){
								$datalistKey['dataList'][] = $filterDataArray;
							}
						}
					} else {
						$datalistKey['dataList'] = $dataSlice;
						$datalistKey['selectedDataList'] = [];
					}

					/*if (isset($totalPage)) {
						$datalistKey['totalPage'] = $totalPage;
						$datalistKey['showPaging'] = $showPaging;
					}*/
				}
				$selectedKeyData[] = $datalistKey;
			}
		}
		$this->jsonOutput['selectionTabsData'] = $selectedKeyData;
	}
	
	function getKeyData()
	{
		if (is_array($this->DisplayOptions) && !empty($this->DisplayOptions))
		{
			$selectedKeyData = array();
			$this->fetch_all_product_and_marketSelection_data($_REQUEST['account']);
			foreach ($this->DisplayOptions as $key => $selectionTab) 
			{
				if($this->settingVars->dataArray[$selectionTab['data']]['NAME_ALIASE'] == $_REQUEST['account'])
				{
					$xmlTagAccountName  = $this->settingVars->dataArray[$selectionTab['data']]['NAME'];
					$xmlTag             = preg_match('/(,|\)|\()/',$xmlTagAccountName)==1 ? $this->settingVars->dataArray[$selectionTab['data']]['NAME_ALIASE'] : strtoupper($xmlTagAccountName);
					
					if (isset($this->settingVars->dataArray[$selectionTab['data']]['use_alias_as_tag']))
						$xmlTag = ($this->settingVars->dataArray[$selectionTab['data']]['use_alias_as_tag']) ? strtoupper($this->settingVars->dataArray[$selectionTab['data']]['NAME_ALIASE']) : $xmlTag;

					if (is_array($this->jsonOutput[$xmlTag]) && !empty($this->jsonOutput[$xmlTag])) {
						if(isset($_REQUEST['commonFilterPage']) && $_REQUEST['commonFilterPage'] == true)
						{
							$selectedKeyData[$key]['dataList'] = $this->jsonOutput['commonFilter'][$xmlTag]['dataList'];
							$selectedKeyData[$key]['selectedDataList'] = (isset($this->jsonOutput['commonFilter'][$xmlTag]['selectedDataList'])) ? $this->jsonOutput['commonFilter'][$xmlTag]['selectedDataList'] : array();
						}
						else
							$selectedKeyData[]['dataList'] = $this->jsonOutput[$xmlTag];
					}
				}
			}
		}
		$this->jsonOutput['selectionTabsData'] = $selectedKeyData;
	}
	
    /** ***
     * COLLECTS ALL PRODUCT AND MARKET SELECTION DATA HELPERS AND CONCATE THEM WITH GLOBAL $jsonOutput 
     * *** 
     */
    public function fetch_all_product_and_marketSelection_data($account) {
        
		if($account != "")
		{
			//IN RARE CASES WE NEED TO ADD ADITIONAL FIELDS IN GROUP BY CLUAUSE AND ALSO AS LABEL WITH THE ORIGINAL ACCOUNT
			//E.G: FOR RUBICON LCL - SKU DATA HELPER IS SHOWN AS 'SKU #UPC'
			//IN ABOVE CASE WE SEND DH VALUE = F1#F2 [ASSUMING F1 AND F2 ARE SKU AND UPC'S INDEX IN DATAARRAY]
			$combineAccounts = explode("#", $account);
			$selectPart = array();
			$groupByPart = array();
			
			foreach ($combineAccounts as $accountKey => $singleAccount) {
				$tempId = key_exists('ID', $this->settingVars->dataArray[$singleAccount]) ? $this->settingVars->dataArray[$singleAccount]['ID'] : "";
				if ($tempId != "") {
					$selectPart[] = $tempId . " AS " . getAdjectiveForIndex($accountKey) . '_ID';
					$groupByPart[] = getAdjectiveForIndex($accountKey) . '_ID';
				}
				
				$tempName = $this->settingVars->dataArray[$singleAccount]['NAME'];
				$selectPart[] = $tempName . " AS " . getAdjectiveForIndex($accountKey) . '_LABEL';
				$groupByPart[] = getAdjectiveForIndex($accountKey) . '_LABEL';
				
			}
			
			$helperTableName = $this->settingVars->dataArray[$combineAccounts[0]]['tablename'];
			$helperLink = $this->settingVars->dataArray[$combineAccounts[0]]['link'];
			$tagNameAccountName = $this->settingVars->dataArray[$combineAccounts[0]]['NAME'];

			//IF 'NAME' FIELD CONTAINS SOME SYMBOLS THAT CAN'T PASS AS A VALID XML TAG , WE USE 'NAME_ALIASE' INSTEAD AS XML TAG
			//AND FOR THAT PARTICULAR REASON, WE ALWAYS SET 'NAME_ALIASE' SO THAT IT IS A VALID XML TAG
			$tagName = preg_match('/(,|\)|\()|\./', $tagNameAccountName) == 1 ? $this->settingVars->dataArray[$combineAccounts[0]]['NAME_ALIASE'] : strtoupper($tagNameAccountName);

			if (isset($this->settingVars->dataArray[$combineAccounts[0]]['use_alias_as_tag']))
				$tagName = ($this->settingVars->dataArray[$combineAccounts[0]]['use_alias_as_tag']) ? strtoupper($this->settingVars->dataArray[$combineAccounts[0]]['NAME_ALIASE']) : $tagName;

			$includeIdInLabel = false;
			if (isset($this->settingVars->dataArray[$combineAccounts[0]]['include_id_in_label']))
				$includeIdInLabel = ($this->settingVars->dataArray[$combineAccounts[0]]['include_id_in_label']) ? true : false;
			
			datahelper\Product_And_Market_Filter_DataCollector::collect_Filter_Data($selectPart, $groupByPart, $tagName, $helperTableName, $helperLink, $this->jsonOutput, $includeIdInLabel, $account);
		}
    }	
}
?> 